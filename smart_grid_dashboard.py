# -*- coding: utf-8 -*-
"""Smart_Grid_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IO2oAT7RsLS4nvXgKoF6o2avUrLcHZx3
"""

# smart_grid_dashboard.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
from datetime import timedelta

st.set_page_config(page_title="Smart Grid Load Forecast", layout="wide")
st.title("🔋 Smart Grid Load Forecasting with AI")

# Load dataset
#@st.cache_data
def load_data():
    # Generate synthetic data
    date_rng = pd.date_range(start='2023-01-01', end='2023-03-01', freq='H')
    np.random.seed(42)
    load = np.sin(np.linspace(0, 50, len(date_rng))) * 10 + 50 + np.random.randn(len(date_rng)) * 5
    temperature = 25 + 10 * np.sin(np.linspace(0, 10, len(date_rng))) + np.random.randn(len(date_rng))
    df = pd.DataFrame({'timestamp': date_rng, 'load_kWh': load, 'temperature_C': temperature})
    return df

df = load_data()
df['hour'] = df['timestamp'].dt.hour
df['dayofweek'] = df['timestamp'].dt.dayofweek

# Sidebar controls

forecast_hours = st.sidebar.slider("Forecast Horizon (hours)", 1, 48, 24)

# 🔍 Feature Impact Simulation
st.subheader("🎛️ Simulate Load Based on Feature Values")
input_temp = st.sidebar.slider("🌡️ Temperature (°C)", min_value=-10.0, max_value=50.0, value=25.0, step=0.5)
input_hour = st.sidebar.slider("🕒 Hour of Day", min_value=0, max_value=23, value=12)
input_day = st.sidebar.slider("📅 Day of Week (0=Mon, 6=Sun)", min_value=0, max_value=6, value=2)

# Train model
features = ['temperature_C', 'hour', 'dayofweek']
X = df[features]
y = df['load_kWh']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, y_train)
predictions = model.predict(X_test)

# Forecast future
last_row = df.iloc[-1]
future_data = pd.DataFrame({
    'temperature_C': [last_row['temperature_C']] * forecast_hours,
    'hour': [(last_row['hour'] + i) % 24 for i in range(1, forecast_hours+1)],
    'dayofweek': [(last_row['dayofweek'] + (last_row['hour'] + i) // 24) % 7 for i in range(1, forecast_hours+1)],
})
future_preds = model.predict(future_data)
future_dates = [last_row['timestamp'] + timedelta(hours=i) for i in range(1, forecast_hours+1)]

# Dashboard: Model Metrics
st.subheader("📈 Model Performance")
col1, col2 = st.columns(2)
col1.metric("MAE", f"{mean_absolute_error(y_test, predictions):.2f}")
col2.metric("RMSE", f"{np.sqrt(mean_squared_error(y_test, predictions)):.2f}")

# 📊 Feature Importance
st.subheader("📌 Feature Importance (Based on Random Forest)")

importances = model.feature_importances_
feature_names = features

importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=True)

fig6, ax6 = plt.subplots(figsize=(8, 4))
ax6.barh(importance_df['Feature'], importance_df['Importance'], color='teal')
ax6.set_title("Feature Importance")
ax6.set_xlabel("Importance Score")
st.pyplot(fig6)
st.balloons()

# Dashboard: Historical vs Predicted
st.subheader("📊 Historical vs Predicted Load")
fig, ax = plt.subplots(figsize=(12, 5))
ax.plot(df['timestamp'][-len(y_test):], y_test, label='Actual Load', color='blue')
ax.plot(df['timestamp'][-len(y_test):], predictions, label='Predicted Load', color='orange')
ax.set_xlabel("Time")
ax.set_ylabel("Load (kWh)")
ax.legend()
st.pyplot(fig)

# Dashboard: Future Forecast
st.subheader("🔮 Forecasted Load")
fig2, ax2 = plt.subplots(figsize=(12, 5))
ax2.plot(pd.to_datetime(future_dates), future_preds, marker='o', color='green')
ax2.set_xlabel("Future Timestamp")
ax2.set_ylabel("Predicted Load (kWh)")
ax2.set_title("Next {} Hour Forecast".format(forecast_hours))
st.pyplot(fig2)

# Create a DataFrame for prediction
input_df = pd.DataFrame({
    'temperature_C': [input_temp],
    'hour': [input_hour],
    'dayofweek': [input_day]
})

predicted_load = model.predict(input_df)[0]

with st.container():
    st.markdown("### 🔋 Predicted Load based on Custom Inputs")
    st.markdown(f"<div style='border: 1px solid #ccc; padding: 15px; border-radius: 10px;'>"
                f"<b>Temperature:</b> {input_temp} °C<br>"
                f"<b>Hour of Day:</b> {input_hour}<br>"
                f"<b>Day of Week:</b> {input_day}<br>"
                f"<b style='color: green;'>Predicted Load:</b> {predicted_load:.2f} kWh"
                f"</div>", unsafe_allow_html=True)

# Optional: visualize the relationship by varying each feature and keeping others constant
with st.container():
    st.markdown("### 📉 Feature Sensitivity Visualization")
    st.markdown("<div style='border: 1px solid #ddd; padding: 10px; border-radius: 10px;'>"
                "<b>Below charts show how each feature independently affects the predicted load.</b>"
                "</div>", unsafe_allow_html=True)

# Temperature Sensitivity Plot
temp_range = np.linspace(-10, 50, 100)
temp_df = pd.DataFrame({
    'temperature_C': temp_range,
    'hour': input_hour,
    'dayofweek': input_day
})
temp_preds = model.predict(temp_df)

fig3, ax3 = plt.subplots(figsize=(10, 4))
ax3.plot(temp_range, temp_preds, color='tomato')
ax3.set_title("Effect of Temperature on Load")
ax3.set_xlabel("Temperature (°C)")
ax3.set_ylabel("Predicted Load (kWh)")
st.pyplot(fig3)

# Hour Sensitivity Plot
hour_range = range(0, 24)
hour_df = pd.DataFrame({
    'temperature_C': input_temp,
    'hour': hour_range,
    'dayofweek': input_day
})
hour_preds = model.predict(hour_df)

fig4, ax4 = plt.subplots(figsize=(10, 4))
ax4.plot(hour_range, hour_preds, color='darkcyan')
ax4.set_title("Effect of Hour of Day on Load")
ax4.set_xlabel("Hour")
ax4.set_ylabel("Predicted Load (kWh)")
st.pyplot(fig4)

# Day Sensitivity Plot
day_range = range(0, 7)
day_df = pd.DataFrame({
    'temperature_C': input_temp,
    'hour': input_hour,
    'dayofweek': day_range
})
day_preds = model.predict(day_df)

fig5, ax5 = plt.subplots(figsize=(10, 4))
ax5.plot(day_range, day_preds, color='slateblue')
ax5.set_title("Effect of Day of Week on Load")
ax5.set_xlabel("Day of Week (0=Mon, 6=Sun)")
ax5.set_ylabel("Predicted Load (kWh)")
st.pyplot(fig5)


